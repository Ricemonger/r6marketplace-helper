services:

  configs_fetcher:
    container_name: r6helper-configs-fetcher
    build:
      context: .
      dockerfile: configs_fetcher/Dockerfile
    image: r6helper-configs-fetcher
    ports:
      - "8091:8081"
    env_file:
      - ubi_constants.env
      - containers_constants.env
      - auth_constants.env
    environment:
      SCHEDULING_ENABLED: true
      SCHEDULING_FIXED_DELAY: 9000000
      SCHEDULING_INITIAL_DELAY: 20000
    networks:
      - postgres-net
      - redis-net
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
      - main_user_reauthorizer

  item_day_sales_ubi_stats_fetcher:
    container_name: r6helper-item-day-sales-ubi-stats-fetcher
    build:
      context: .
      dockerfile: item_day_sales_ubi_stats_fetcher/Dockerfile
    image: r6helper-item-day-sales-ubi-stats-fetcher
    ports:
      - "8092:8082"
    env_file:
      - ubi_constants.env
      - containers_constants.env
      - auth_constants.env
    environment:
      SCHEDULING_ENABLED: true
      SCHEDULING_FIXED_DELAY: 86400000
      SCHEDULING_INITIAL_DELAY: 75000
    networks:
      - postgres-net
      - redis-net
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
      - main_user_reauthorizer
      - configs_fetcher
      - items_stats_fetcher

  items_stats_fetcher:
    container_name: r6helper-item-stats-fetcher
    build:
      context: .
      dockerfile: item_stats_fetcher/Dockerfile
    image: r6helper-item-stats-fetcher
    ports:
      - "8093:8083"
    env_file:
      - ubi_constants.env
      - containers_constants.env
      - auth_constants.env
    environment:
      SCHEDULING_ENABLED: true
      SCHEDULING_FIXED_DELAY_STATS: 90000
      SCHEDULING_INITIAL_DELAY_STATS: 30000
      SCHEDULING_FIXED_DELAY_PRICE: 30000
      SCHEDULING_INITIAL_DELAY_PRICE: 315000
    networks:
      - postgres-net
      - redis-net
      - kafka-net
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
      - main_user_reauthorizer
      - configs_fetcher

  item_trade_stats_calculator:
    container_name: r6helper-item-trade-stats-calculator
    build:
      context: .
      dockerfile: item_trade_stats_calculator/Dockerfile
    image: r6helper-item-trade-stats-calculator
    ports:
      - "8094:8084"
    env_file:
      - ubi_constants.env
      - containers_constants.env
      - auth_constants.env
    environment:
      SCHEDULING_ENABLED: true
      SCHEDULING_FIXED_DELAY_ITEMS: 1200000
      SCHEDULING_INITIAL_DELAY_ITEMS: 240000
      SCHEDULING_FIXED_DELAY_CURRENT_PRICES: 45000
      SCHEDULING_INITIAL_DELAY_CURRENT_PRICES: 330000
    networks:
        - postgres-net
        - redis-net
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
      - main_user_reauthorizer
      - configs_fetcher
      - items_stats_fetcher
      - item_day_sales_ubi_stats_fetcher


  main_user_reauthorizer:
    container_name: r6helper-main-user-reauthorizer
    build:
      context: .
      dockerfile: main_user_reauthorizer/Dockerfile
    image: r6helper-main-user-reauthorizer
    ports:
      - "8095:8085"
    env_file:
      - ubi_constants.env
      - containers_constants.env
      - auth_constants.env
    environment:
      SCHEDULING_ENABLED: true
      SCHEDULING_FIXED_DELAY: 9000000
      SCHEDULING_INITIAL_DELAY: 0
    networks:
      - postgres-net
      - redis-net
    restart: unless-stopped
    depends_on:
      - redis

  notifications_service:
    container_name: r6helper-notifications-service
    build:
      context: .
      dockerfile: notifications_service/Dockerfile
    image: r6helper-notifications-service
    ports:
      - "8096:8086"
    env_file:
      - ubi_constants.env
      - containers_constants.env
      - auth_constants.env
    networks:
      - postgres-net
      - redis-net
      - kafka-net
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
      - kafka

  telegram_bot_updates_consumer:
    container_name: r6helper-telegram-bot-updates-consumer
    build:
      context: .
      dockerfile: telegram_bot_updates_consumer/Dockerfile
    image: r6helper-telegram-bot-updates-consumer
    ports:
      - "8097:8087"
    env_file:
      - ubi_constants.env
      - containers_constants.env
      - auth_constants.env
    networks:
      - postgres-net
      - redis-net
    restart: unless-stopped
    depends_on:
      - postgres
      - redis

  trades_manager:
    container_name: r6helper-trades-manager
    build:
      context: .
      dockerfile: trades_manager/Dockerfile
    image: r6helper-trades-manager
    ports:
      - "8098:8088"
    env_file:
      - ubi_constants.env
      - containers_constants.env
      - auth_constants.env
    environment:
      SCHEDULING_ENABLED: true
      SCHEDULING_FIXED_RATE: 60000
      SCHEDULING_INITIAL_DELAY: 375000
    networks:
      - postgres-net
      - redis-net
      - kafka-net
    restart: unless-stopped
    depends_on:
      - postgres
      - redis

  fast_sell_trades_manager:
    container_name: r6helper-fast-sell-trades-manager
    build:
      context: .
      dockerfile: fast_sell_trades_manager/Dockerfile
    image: r6helper-fast-sell-trades-manager
    ports:
      - "8101:8079"
    env_file:
      - ubi_constants.env
      - containers_constants.env
      - auth_constants.env
    environment:
      SCHEDULING_ENABLED: true
      SCHEDULING_FIXED_DELAY_ONE_USER_FAST_SELL_MANAGEMENT_UPDATE: 325
      SCHEDULING_INITIAL_DELAY_ONE_USER_FAST_SELL_MANAGEMENT_UPDATE: 10500
      SCHEDULING_FIXED_DELAY_ONE_USER_FAST_SELL_MANAGEMENT_FETCH: 60 # should be bigger or equal to 300/(Amount of provided fetching accounts)
      # to avoid too many requests error
      SCHEDULING_INITIAL_DELAY_ONE_USER_FAST_SELL_MANAGEMENT_FETCH: 12500
      SCHEDULING_FIXED_DELAY_ONE_USER_FAST_SELL_MANAGEMENT_EXECUTE: 5
      SCHEDULING_INITIAL_DELAY_ONE_USER_FAST_SELL_MANAGEMENT_EXECUTE: 10800
      SCHEDULING_FIXED_DELAY_KEEP_UNUSED_SLOT: 600000
      SCHEDULING_INITIAL_DELAY_KEEP_UNUSED_SLOT: 7500
      SCHEDULING_FIXED_DELAY_MEDIAN_PRICES_FETCH: 600000
      SCHEDULING_INITIAL_MEDIAN_PRICES_FETCH: 5000
      SCHEDULING_FIXED_DELAY_USER_FETCH: 600000
      SCHEDULING_INITIAL_DELAY_USER_FETCH: 0

      LOGGING_LEVEL: info

      FAST_SELL_USER_ID: 1
      FAST_SELL_EMAIL: leskotr23@gmail.com

      FAST_SELL_MIN_MEDIAN_PRICE_DIFFERENCE: 300
      FAST_SELL_MIN_MEDIAN_PRICE_DIFFERENCE_PERCENTAGE: 100
      FAST_SELL_OWNED_ITEMS_LIMIT: 350 # recommended to be <= 500, takes 360ms for 300
      FAST_SELL_FETCH_USERS_ITEMS_OFFSET: 75
      FAST_SELL_FETCH_USERS_ITEMS_LIMIT: 2000 # takes 300ms, 170 owned items for 1500, 390ms and 250 items for 2000
      FAST_SELL_SLEEP_AFTER_EXECUTION_TIME_MS: 0 # not needed for now
    networks:
      - postgres-net
      - redis-net
    restart: unless-stopped
    depends_on:
      - postgres
      - redis

  fetching_users_reauthorizer:
    container_name: r6helper-fetching-users-reauthorizer
    build:
      context: .
      dockerfile: fetching_users_reauthorizer/Dockerfile
    image: r6helper-fetching-users-reauthorizer
    ports:
      - "8102:8078"
    env_file:
      - ubi_constants.env
      - containers_constants.env
      - auth_constants.env
    environment:
      SCHEDULING_ENABLED: true
      SCHEDULING_FIXED_DELAY: 9000000
      SCHEDULING_INITIAL_DELAY: 0
    #volumes: you should provide your own fetching_accounts_credentials.json with list of ubi account credentials to fetch info from db, now is
    #used only for fast sell trades management
     # - ./src/main/resources/fetching_accounts_credentials.json:/app/resources/fetching_accounts_credentials.json
    networks:
      - postgres-net
    restart: unless-stopped
    depends_on:
      - postgres

  ubi_users_stats_fetcher:
    container_name: r6helper-ubi-users-stats-fetcher
    build:
      context: .
      dockerfile: ubi_users_stats_fetcher/Dockerfile
    image: r6helper-ubi-users-stats-fetcher
    ports:
      - "8099:8089"
    env_file:
      - ubi_constants.env
      - containers_constants.env
      - auth_constants.env
    environment:
      SCHEDULING_ENABLED: true
      SCHEDULING_FIXED_DELAY: 45000
      SCHEDULING_INITIAL_DELAY: 345000
    networks:
      - postgres-net
      - redis-net
      - kafka-net
    restart: unless-stopped
    depends_on:
      - postgres
      - redis

  users_ubi_accs_reauthorizer:
    container_name: r6helper-users-ubi-accs-reauthorizer
    build:
      context: .
      dockerfile: users_ubi_accs_reauthorizer/Dockerfile
    image: r6helper-users-ubi-accs-reauthorizer
    ports:
      - "8100:8090"
    env_file:
      - ubi_constants.env
      - containers_constants.env
      - auth_constants.env
    environment:
      SCHEDULING_ENABLED: true
      SCHEDULING_FIXED_DELAY: 9000000
      SCHEDULING_INITIAL_DELAY: 90000
    networks:
      - postgres-net
      - redis-net
      - kafka-net
    restart: unless-stopped
    depends_on:
      - postgres
      - redis

  postgres:
    container_name: r6helper-postgres
    command: postgres -c 'max_connections=300'
    image: postgres:16.4
    ports:
      - "5432:5432"
    env_file:
      - containers_constants.env
      - auth_constants.env
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - postgres-net
    restart: unless-stopped

  pgadmin:
    container_name: r6helper-pgadmin
    image: dpage/pgadmin4:8.12
    ports:
      - "5050:80"
    networks:
      - postgres-net
    env_file:
      - auth_constants.env
    environment:
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    restart: unless-stopped

  redis:
    container_name: r6helper-redis
    image: redis:7.2.4-bookworm
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - redis-net
    restart: unless-stopped

  redis-test:
    profiles: ["manual"]
    container_name: r6helper-redis-test
    image: redis:7.2.4-bookworm
    ports:
      - "6380:6379"
    volumes:
      - test-redis-data:/data
    networks:
      - redis-net
    restart: unless-stopped

  kafka:
    container_name: r6helper-kafka
    image: bitnamilegacy/kafka:3.9.0
    ports:
      - "9092:9092"
    environment:
      - KAFKA_MOUNTED_CONF_DIR=/bitnami/kafka/config
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@r6helper-kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9091,CONTROLLER://:9093,EXTERNAL://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://r6helper-kafka:9091,CONTROLLER://r6helper-kafka:9093,EXTERNAL://localhost:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    volumes:
      - kafka-data:/bitnami/kafka
    networks:
      - kafka-net
    restart: unless-stopped

networks:
  postgres-net:
  redis-net:
  kafka-net:

volumes:
  postgres-data:
  redis-data:
  test-redis-data:
  kafka-data:
